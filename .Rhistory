install.packages("tidyverse")
q()
install.packages("reticulate")
reticulate::py_install("pandas")
# set seed for reproducibility
set.seed(123)
# define attributes
brand <- c("N", "P", "H") # Netflix, Prime, Hulu
ad <- c("Yes", "No")
price <- seq(8, 32, by=4)
# generate all possible profiles
profiles <- expand.grid(
    brand = brand,
    ad = ad,
    price = price
)
m <- nrow(profiles)
# assign part-worth utilities (true parameters)
b_util <- c(N = 1.0, P = 0.5, H = 0)
a_util <- c(Yes = -0.8, No = 0.0)
p_util <- function(p) -0.1 * p
# number of respondents, choice tasks, and alternatives per task
n_peeps <- 100
n_tasks <- 10
n_alts <- 3
# function to simulate one respondentâ€™s data
sim_one <- function(id) {
  
    datlist <- list()
    
    # loop over choice tasks
    for (t in 1:n_tasks) {
        
        # randomly sample 3 alts (better practice would be to use a design)
        dat <- cbind(resp=id, task=t, profiles[sample(m, size=n_alts), ])
        
        # compute deterministic portion of utility
        dat$v <- b_util[dat$brand] + a_util[dat$ad] + p_util(dat$price) |> round(10)
        
        # add Gumbel noise (Type I extreme value)
        dat$e <- -log(-log(runif(n_alts)))
        dat$u <- dat$v + dat$e
        
        # identify chosen alternative
        dat$choice <- as.integer(dat$u == max(dat$u))
        
        # store task
        datlist[[t]] <- dat
    }
    
    # combine all tasks for one respondent
    do.call(rbind, datlist)
}
# simulate data for all respondents
conjoint_data <- do.call(rbind, lapply(1:n_peeps, sim_one))
# remove values unobservable to the researcher
conjoint_data <- conjoint_data[ , c("resp", "task", "brand", "ad", "price", "choice")]
# clean up
rm(list=setdiff(ls(), "conjoint_data"))
reticulate::repl_python(quiet = TRUE, input = r"--(import pandas as pd
import numpy as np
from scipy.optimize import minimize
from numpy.linalg import inv
import matplotlib.pyplot as plt)--")
reticulate::repl_python(quiet = TRUE, input = r"--(import pandas as pd
import numpy as np
from scipy.optimize import minimize
from numpy.linalg import inv
import matplotlib.pyplot as plt)--")
reticulate::repl_python(quiet = TRUE, input = r"--(conjoint = pd.read_csv('conjoint_data.csv')
conjoint
conjoint['ad_yes'] = conjoint['ad'].apply(lambda x: 1 if x == 'Yes' else 0)
df_dummies = pd.get_dummies(conjoint, columns=['brand'], drop_first=True)
df_dummies.drop(columns=['ad'], inplace=True)
df_dummies = df_dummies.astype(int)
df_dummies)--")
reticulate::repl_python(quiet = TRUE, input = r"--(import pandas as pd
import numpy as np
from scipy.optimize import minimize
from numpy.linalg import inv
import matplotlib.pyplot as plt)--")
reticulate::repl_python(quiet = TRUE, input = r"--(conjoint = pd.read_csv('conjoint_data.csv')
conjoint
conjoint['ad_yes'] = conjoint['ad'].apply(lambda x: 1 if x == 'Yes' else 0)
df_dummies = pd.get_dummies(conjoint, columns=['brand'], drop_first=True)
df_dummies.drop(columns=['ad'], inplace=True)
df_dummies = df_dummies.astype(int)
df_dummies)--")
reticulate::repl_python(quiet = TRUE, input = r"--(def log_likelihood(beta, data, negate=False):
    beta_n, beta_p, beta_ad, beta_price = beta
    utility = (
        beta_n * data["brand_N"] +
        beta_p * data["brand_P"] +
        beta_ad * data["ad_yes"] +
        beta_price * data["price"]
    )
    data = data.copy()
    data["exp_utility"] = np.exp(utility)
    data["denom"] = data.groupby(["resp", "task"])["exp_utility"].transform("sum")
    data["prob"] = data["exp_utility"] / data["denom"]
    data["log_likelihood"] = data["choice"] * np.log(data["prob"])
    result = data["log_likelihood"].sum()
    return -result if negate else result)--")
